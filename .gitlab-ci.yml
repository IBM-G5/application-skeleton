stages:
  - optimalisation
  - code quality
  - dependency scanning
  - build
  - test
  - deploy

# Cache default configuration
cache: &global_cache
  key: "$CI_PIPELINE_ID"
  paths:
    - node_modules
    - public/build
    - vendor
  policy: pull

# Optimalisation
Install composer dependencies:
  image: sumocoders/framework-php72:latest
  script:
    - COMPOSER_MEMORY_LIMIT=-1 composer install --no-scripts
  cache:
    paths:
      - vendor
      - node_modules
  stage: optimalisation
  tags:
    - docker

Install npm dependencies:
  image: sumocoders/cli-tools-php72:latest
  script:
    - nvm exec npm install
  cache:
    <<: *global_cache
    policy: pull-push
  stage: build
  tags:
    - docker


# Code Quality section
Check code standards with PHP_CodeSniffer:
  image: sumocoders/framework-php72:latest
  script:
    - vendor/bin/phpcs --report-full --report-junit=phpcs-report.xml
  artifacts:
    expire_in: 1 week
    reports:
      junit: phpcs-report.xml
  stage: code quality
  tags:
    - docker
  allow_failure: true

Check for bugs with PHPStan:
  image: sumocoders/framework-php72:latest
  before_script:
    - bin/console cache:warmup --env=dev
  script:
    - vendor/bin/phpstan analyse --memory-limit=-1 --error-format=junit --no-progress > phpstan-report.xml
  after_script:
    # Run it again so the output is visible in the job
    - vendor/bin/phpstan analyse --memory-limit=-1
  artifacts:
    expire_in: 1 week
    reports:
      junit: phpstan-report.xml
  stage: code quality
  tags:
    - docker
  allow_failure: true

Check for code standards with stylelint:
  image: sumocoders/cli-tools-php72
  script:
    - vendor/bin/convert-to-junit-xml convert:stylelint "$(nvm exec --silent node_modules/.bin/stylelint --formatter=json .)" > stylelint-report.xml
  after_script:
    # Run it again so the output is visible in the job
    - nvm exec node_modules/.bin/stylelint .
  artifacts:
    expire_in: 1 week
    reports:
      junit: stylelint-report.xml
  stage: code quality
  tags:
    - docker
  allow_failure: true

Check for unresolved TODOs:
  image: sumocoders/cli-tools-php72
  script:
    - vendor/bin/convert-to-junit-xml convert:grep "$(grep --exclude-dir={bin,config/packages/*,node_modules,var,vendor} -rni -E "\b(FIXME|TODO|HACK|REVIEW|QUESTION|TEMP)\b" *)" > unresolved-todos-report.xml
  after_script:
    # Run it again so the output is visible in the job
    - grep --exclude=unresolved-todos-report.xml --exclude-dir={bin,config/packages/*,node_modules,var,vendor} -rni -E "\b(FIXME|TODO|HACK|REVIEW|QUESTION|TEMP)\b" *
  artifacts:
    expire_in: 1 week
    reports:
      junit: unresolved-todos-report.xml
  stage: code quality
  tags:
    - docker
  allow_failure: true


## Dependency Scanning section
Check NPM dependencies for vulnerabilities:
  image: sumocoders/cli-tools-php72:latest
  script:
    - vendor/bin/convert-to-junit-xml convert:npm-audit "$(nvm exec --silent npm audit --json)" > npm-audit-report.xml
  after_script:
    # Run it again so the output is visible in the job output
    - nvm exec npm audit
  artifacts:
    expire_in: 1 week
    reports:
      junit: npm-audit-report.xml
  stage: dependency scanning
  tags:
    - docker
  allow_failure: true

Check Composer dependencies for vulnerabilities:
  image: sumocoders/cli-tools-php72:latest
  script:
    - vendor/bin/convert-to-junit-xml convert:sensiolabs-security-check "$(vendor/bin/security-checker security:check --format=json)" > security-checker-report.xml
  after_script:
    # Run it again so the output is visible in the job output
    - vendor/bin/security-checker security:check
  artifacts:
    expire_in: 1 week
    reports:
      junit: security-checker-report.xml
  stage: dependency scanning
  tags:
    - docker
  allow_failure: true


## Build section
Build assets with Encore:
  image: sumocoders/cli-tools-php72:latest
  script:
    - php bin/console bazinga:js-translation:dump public/build --format=json --merge-domains
    - php bin/console fos:js-routing:dump --format=json --locale=nl --target=public/build/routes/fos_js_routes.json
    - nvm exec npm run build
  cache:
    paths:
      - node_modules
      - public/build
      - vendor
  stage: build
  tags:
    - docker


## Test section
## Uncomment this if you have tests
#Run test with PHPUnit:
#  image: sumocoders/framework-php72:latest
#  script:
#    - vendor/bin/simple-phpunit --log-junit phpunit-report.xml
#  artifacts:
#    reports:
#      junit: phpunit-report.xml
#  stage: test
#  tags:
#    - docker


## Deploy section
#Deploy to staging:
#  image: sumocoders/cli-tools-php72:latest
#  before_script:
#    # Add the private SSH key to the CI environment
#    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
#    - eval $(ssh-agent -s)
#    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
#    - mkdir -p ~/.ssh
#    - chmod 700 ~/.ssh
#    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
#    - chmod 644 ~/.ssh/known_hosts
#  script:
#    - vendor/bin/dep deploy staging
#  environment:
#    name: staging
#    url: https://project.client.php72.sumocoders.eu
#  only:
#    - staging
#  stage: deploy
#  tags:
#    - docker
